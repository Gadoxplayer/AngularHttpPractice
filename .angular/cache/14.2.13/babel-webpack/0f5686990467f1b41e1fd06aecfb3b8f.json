{"ast":null,"code":"import _get from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _classCallCheck from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _possibleConstructorReturn from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js\";\nimport _getPrototypeOf from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport var ConnectableObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(ConnectableObservable, _Observable);\n  function ConnectableObservable(source, subjectFactory) {\n    var _this;\n    _classCallCheck(this, ConnectableObservable);\n    _this = _callSuper(this, ConnectableObservable);\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n  _createClass(ConnectableObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      return this.getSubject().subscribe(subscriber);\n    }\n  }, {\n    key: \"getSubject\",\n    value: function getSubject() {\n      var subject = this._subject;\n      if (!subject || subject.isStopped) {\n        this._subject = this.subjectFactory();\n      }\n      return this._subject;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var connection = this._connection;\n      if (!connection) {\n        this._isComplete = false;\n        connection = this._connection = new Subscription();\n        connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n        if (connection.closed) {\n          this._connection = null;\n          connection = Subscription.EMPTY;\n        }\n      }\n      return connection;\n    }\n  }, {\n    key: \"refCount\",\n    value: function refCount() {\n      return higherOrderRefCount()(this);\n    }\n  }]);\n  return ConnectableObservable;\n}(Observable);\nexport var connectableObservableDescriptor = function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\nvar ConnectableSubscriber = /*#__PURE__*/function (_SubjectSubscriber) {\n  _inherits(ConnectableSubscriber, _SubjectSubscriber);\n  function ConnectableSubscriber(destination, connectable) {\n    var _this2;\n    _classCallCheck(this, ConnectableSubscriber);\n    _this2 = _callSuper(this, ConnectableSubscriber, [destination]);\n    _this2.connectable = connectable;\n    return _this2;\n  }\n  _createClass(ConnectableSubscriber, [{\n    key: \"_error\",\n    value: function _error(err) {\n      this._unsubscribe();\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.connectable._isComplete = true;\n      this._unsubscribe();\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n      if (connectable) {\n        this.connectable = null;\n        var connection = connectable._connection;\n        connectable._refCount = 0;\n        connectable._subject = null;\n        connectable._connection = null;\n        if (connection) {\n          connection.unsubscribe();\n        }\n      }\n    }\n  }]);\n  return ConnectableSubscriber;\n}(SubjectSubscriber);\nvar RefCountOperator = /*#__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    _classCallCheck(this, RefCountOperator);\n    this.connectable = connectable;\n  }\n  _createClass(RefCountOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var connectable = this.connectable;\n      connectable._refCount++;\n      var refCounter = new RefCountSubscriber(subscriber, connectable);\n      var subscription = source.subscribe(refCounter);\n      if (!refCounter.closed) {\n        refCounter.connection = connectable.connect();\n      }\n      return subscription;\n    }\n  }]);\n  return RefCountOperator;\n}();\nvar RefCountSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(RefCountSubscriber, _Subscriber);\n  function RefCountSubscriber(destination, connectable) {\n    var _this3;\n    _classCallCheck(this, RefCountSubscriber);\n    _this3 = _callSuper(this, RefCountSubscriber, [destination]);\n    _this3.connectable = connectable;\n    return _this3;\n  }\n  _createClass(RefCountSubscriber, [{\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n      if (!connectable) {\n        this.connection = null;\n        return;\n      }\n      this.connectable = null;\n      var refCount = connectable._refCount;\n      if (refCount <= 0) {\n        this.connection = null;\n        return;\n      }\n      connectable._refCount = refCount - 1;\n      if (refCount > 1) {\n        this.connection = null;\n        return;\n      }\n      var connection = this.connection;\n      var sharedConnection = connectable._connection;\n      this.connection = null;\n      if (sharedConnection && (!connection || sharedConnection === connection)) {\n        sharedConnection.unsubscribe();\n      }\n    }\n  }]);\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"names":["SubjectSubscriber","Observable","Subscriber","Subscription","refCount","higherOrderRefCount","ConnectableObservable","_Observable","_inherits","source","subjectFactory","_this","_classCallCheck","_callSuper","_refCount","_isComplete","_createClass","key","value","_subscribe","subscriber","getSubject","subscribe","subject","_subject","isStopped","connect","connection","_connection","add","ConnectableSubscriber","closed","EMPTY","connectableObservableDescriptor","connectableProto","prototype","operator","writable","_SubjectSubscriber","destination","connectable","_this2","_error","err","_unsubscribe","_get","_getPrototypeOf","call","_complete","unsubscribe","RefCountOperator","refCounter","RefCountSubscriber","subscription","_Subscriber","_this3","sharedConnection"],"sources":["D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js"],"sourcesContent":["import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nexport const connectableObservableDescriptor = (() => {\n    const connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}