{"ast":null,"code":"import _possibleConstructorReturn from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js\";\nimport _getPrototypeOf from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\nexport var MergeScanOperator = /*#__PURE__*/function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    _classCallCheck(this, MergeScanOperator);\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n  _createClass(MergeScanOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n  }]);\n  return MergeScanOperator;\n}();\nexport var MergeScanSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(MergeScanSubscriber, _SimpleOuterSubscribe);\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    var _this;\n    _classCallCheck(this, MergeScanSubscriber);\n    _this = _callSuper(this, MergeScanSubscriber, [destination]);\n    _this.accumulator = accumulator;\n    _this.acc = acc;\n    _this.concurrent = concurrent;\n    _this.hasValue = false;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n  _createClass(MergeScanSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        var index = this.index++;\n        var destination = this.destination;\n        var ish;\n        try {\n          var accumulator = this.accumulator;\n          ish = accumulator(this.acc, value, index);\n        } catch (e) {\n          return destination.error(e);\n        }\n        this.active++;\n        this._innerSub(ish);\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(ish, innerSubscriber);\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n      if (this.active === 0 && this.buffer.length === 0) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n        this.destination.complete();\n      }\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      var destination = this.destination;\n      this.acc = innerValue;\n      this.hasValue = true;\n      destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n        this.destination.complete();\n      }\n    }\n  }]);\n  return MergeScanSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"names":["SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","mergeScan","accumulator","seed","concurrent","arguments","length","undefined","Number","POSITIVE_INFINITY","source","lift","MergeScanOperator","_classCallCheck","_createClass","key","value","call","subscriber","subscribe","MergeScanSubscriber","_SimpleOuterSubscribe","_inherits","destination","acc","_this","_callSuper","hasValue","hasCompleted","buffer","active","index","_next","ish","e","error","_innerSub","push","innerSubscriber","add","innerSubscription","_complete","next","complete","unsubscribe","notifyNext","innerValue","notifyComplete","shift"],"sources":["D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/rxjs/_esm2015/internal/operators/mergeScan.js"],"sourcesContent":["import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n    return (source) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n    constructor(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n}\nexport class MergeScanSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, accumulator, acc, concurrent) {\n        super(destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            const index = this.index++;\n            const destination = this.destination;\n            let ish;\n            try {\n                const { accumulator } = this;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        const { destination } = this;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}