{"ast":null,"code":"import _possibleConstructorReturn from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js\";\nimport _assertThisInitialized from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n  var length = arguments.length;\n  var scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n  var bufferCreationInterval = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n  var maxBufferSize = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n  return function bufferTimeOperatorFunction(source) {\n    return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\nvar BufferTimeOperator = /*#__PURE__*/function () {\n  function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    _classCallCheck(this, BufferTimeOperator);\n    this.bufferTimeSpan = bufferTimeSpan;\n    this.bufferCreationInterval = bufferCreationInterval;\n    this.maxBufferSize = maxBufferSize;\n    this.scheduler = scheduler;\n  }\n  _createClass(BufferTimeOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    }\n  }]);\n  return BufferTimeOperator;\n}();\nvar Context = /*#__PURE__*/_createClass(function Context() {\n  _classCallCheck(this, Context);\n  this.buffer = [];\n});\nvar BufferTimeSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(BufferTimeSubscriber, _Subscriber);\n  function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    var _this;\n    _classCallCheck(this, BufferTimeSubscriber);\n    _this = _callSuper(this, BufferTimeSubscriber, [destination]);\n    _this.bufferTimeSpan = bufferTimeSpan;\n    _this.bufferCreationInterval = bufferCreationInterval;\n    _this.maxBufferSize = maxBufferSize;\n    _this.scheduler = scheduler;\n    _this.contexts = [];\n    var context = _this.openContext();\n    _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (_this.timespanOnly) {\n      var timeSpanOnlyState = {\n        subscriber: _assertThisInitialized(_this),\n        context: context,\n        bufferTimeSpan: bufferTimeSpan\n      };\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      var closeState = {\n        subscriber: _assertThisInitialized(_this),\n        context: context\n      };\n      var creationState = {\n        bufferTimeSpan: bufferTimeSpan,\n        bufferCreationInterval: bufferCreationInterval,\n        subscriber: _assertThisInitialized(_this),\n        scheduler: scheduler\n      };\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n    return _this;\n  }\n  _createClass(BufferTimeSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var contexts = this.contexts;\n      var len = contexts.length;\n      var filledBufferContext;\n      for (var i = 0; i < len; i++) {\n        var context = contexts[i];\n        var buffer = context.buffer;\n        buffer.push(value);\n        if (buffer.length == this.maxBufferSize) {\n          filledBufferContext = context;\n        }\n      }\n      if (filledBufferContext) {\n        this.onBufferFull(filledBufferContext);\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.contexts.length = 0;\n      _get(_getPrototypeOf(BufferTimeSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var contexts = this.contexts,\n        destination = this.destination;\n      while (contexts.length > 0) {\n        var context = contexts.shift();\n        destination.next(context.buffer);\n      }\n      _get(_getPrototypeOf(BufferTimeSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.contexts = null;\n    }\n  }, {\n    key: \"onBufferFull\",\n    value: function onBufferFull(context) {\n      this.closeContext(context);\n      var closeAction = context.closeAction;\n      closeAction.unsubscribe();\n      this.remove(closeAction);\n      if (!this.closed && this.timespanOnly) {\n        context = this.openContext();\n        var bufferTimeSpan = this.bufferTimeSpan;\n        var timeSpanOnlyState = {\n          subscriber: this,\n          context: context,\n          bufferTimeSpan: bufferTimeSpan\n        };\n        this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n      }\n    }\n  }, {\n    key: \"openContext\",\n    value: function openContext() {\n      var context = new Context();\n      this.contexts.push(context);\n      return context;\n    }\n  }, {\n    key: \"closeContext\",\n    value: function closeContext(context) {\n      this.destination.next(context.buffer);\n      var contexts = this.contexts;\n      var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n      if (spliceIndex >= 0) {\n        contexts.splice(contexts.indexOf(context), 1);\n      }\n    }\n  }]);\n  return BufferTimeSubscriber;\n}(Subscriber);\nfunction dispatchBufferTimeSpanOnly(state) {\n  var subscriber = state.subscriber;\n  var prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\nfunction dispatchBufferCreation(state) {\n  var bufferCreationInterval = state.bufferCreationInterval,\n    bufferTimeSpan = state.bufferTimeSpan,\n    subscriber = state.subscriber,\n    scheduler = state.scheduler;\n  var context = subscriber.openContext();\n  var action = this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {\n      subscriber: subscriber,\n      context: context\n    }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\nfunction dispatchBufferClose(arg) {\n  var subscriber = arg.subscriber,\n    context = arg.context;\n  subscriber.closeContext(context);\n}","map":{"version":3,"names":["async","Subscriber","isScheduler","bufferTime","bufferTimeSpan","length","arguments","scheduler","bufferCreationInterval","maxBufferSize","Number","POSITIVE_INFINITY","bufferTimeOperatorFunction","source","lift","BufferTimeOperator","_classCallCheck","_createClass","key","value","call","subscriber","subscribe","BufferTimeSubscriber","Context","buffer","_Subscriber","_inherits","destination","_this","_callSuper","contexts","context","openContext","timespanOnly","timeSpanOnlyState","_assertThisInitialized","add","closeAction","schedule","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","_next","len","filledBufferContext","i","push","onBufferFull","_error","err","_get","_getPrototypeOf","prototype","_complete","shift","next","_unsubscribe","closeContext","unsubscribe","remove","closed","spliceIndex","indexOf","splice","state","prevContext","action","arg"],"sources":["D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/rxjs/_esm2015/internal/operators/bufferTime.js"],"sourcesContent":["import { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n    let length = arguments.length;\n    let scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    let bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    let maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nclass BufferTimeOperator {\n    constructor(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    }\n}\nclass Context {\n    constructor() {\n        this.buffer = [];\n    }\n}\nclass BufferTimeSubscriber extends Subscriber {\n    constructor(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        super(destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        const context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            const closeState = { subscriber: this, context };\n            const creationState = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    _next(value) {\n        const contexts = this.contexts;\n        const len = contexts.length;\n        let filledBufferContext;\n        for (let i = 0; i < len; i++) {\n            const context = contexts[i];\n            const buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    }\n    _error(err) {\n        this.contexts.length = 0;\n        super._error(err);\n    }\n    _complete() {\n        const { contexts, destination } = this;\n        while (contexts.length > 0) {\n            const context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        this.contexts = null;\n    }\n    onBufferFull(context) {\n        this.closeContext(context);\n        const closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            const bufferTimeSpan = this.bufferTimeSpan;\n            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    }\n    openContext() {\n        const context = new Context();\n        this.contexts.push(context);\n        return context;\n    }\n    closeContext(context) {\n        this.destination.next(context.buffer);\n        const contexts = this.contexts;\n        const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    }\n}\nfunction dispatchBufferTimeSpanOnly(state) {\n    const subscriber = state.subscriber;\n    const prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n    const context = subscriber.openContext();\n    const action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    const { subscriber, context } = arg;\n    subscriber.closeContext(context);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}