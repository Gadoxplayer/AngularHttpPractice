{"ast":null,"code":"import _possibleConstructorReturn from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js\";\nimport _getPrototypeOf from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\nexport var MergeMapOperator = /*#__PURE__*/function () {\n  function MergeMapOperator(project) {\n    var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n    _classCallCheck(this, MergeMapOperator);\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n  _createClass(MergeMapOperator, [{\n    key: \"call\",\n    value: function call(observer, source) {\n      return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n  }]);\n  return MergeMapOperator;\n}();\nexport var MergeMapSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(MergeMapSubscriber, _SimpleOuterSubscribe);\n  function MergeMapSubscriber(destination, project) {\n    var _this;\n    var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n    _classCallCheck(this, MergeMapSubscriber);\n    _this = _callSuper(this, MergeMapSubscriber, [destination]);\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n  _createClass(MergeMapSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        this._tryNext(value);\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_tryNext\",\n    value: function _tryNext(value) {\n      var result;\n      var index = this.index++;\n      try {\n        result = this.project(value, index);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n      this.active++;\n      this._innerSub(result);\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(ish, innerSubscriber);\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n      if (this.active === 0 && this.buffer.length === 0) {\n        this.destination.complete();\n      }\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this.destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        this.destination.complete();\n      }\n    }\n  }]);\n  return MergeMapSubscriber;\n}(SimpleOuterSubscriber);\nexport var flatMap = mergeMap;","map":{"version":3,"names":["map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","mergeMap","project","resultSelector","concurrent","arguments","length","undefined","Number","POSITIVE_INFINITY","source","pipe","a","i","b","ii","lift","MergeMapOperator","_classCallCheck","_createClass","key","value","call","observer","subscribe","MergeMapSubscriber","_SimpleOuterSubscribe","_inherits","destination","_this","_callSuper","hasCompleted","buffer","active","index","_next","_tryNext","push","result","err","error","_innerSub","ish","innerSubscriber","add","innerSubscription","_complete","complete","unsubscribe","notifyNext","innerValue","next","notifyComplete","shift","flatMap"],"sources":["D:/Documents/Eduardo/UdemyCourses/Angularhttp-01-start/node_modules/rxjs/_esm2015/internal/operators/mergeMap.js"],"sourcesContent":["import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result);\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\nexport const flatMap = mergeMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}